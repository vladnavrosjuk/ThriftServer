/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-03-20")
public class Facultet implements org.apache.thrift.TBase<Facultet, Facultet._Fields>, java.io.Serializable, Cloneable, Comparable<Facultet> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Facultet");

  private static final org.apache.thrift.protocol.TField NAMEFACULTET_FIELD_DESC = new org.apache.thrift.protocol.TField("namefacultet", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NAMESPECIALITY_FIELD_DESC = new org.apache.thrift.protocol.TField("namespeciality", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField GROUP_FIELD_DESC = new org.apache.thrift.protocol.TField("group", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new FacultetStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new FacultetTupleSchemeFactory();

  public String namefacultet; // required
  public String namespeciality; // required
  public String group; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAMEFACULTET((short)1, "namefacultet"),
    NAMESPECIALITY((short)2, "namespeciality"),
    GROUP((short)3, "group");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAMEFACULTET
          return NAMEFACULTET;
        case 2: // NAMESPECIALITY
          return NAMESPECIALITY;
        case 3: // GROUP
          return GROUP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAMEFACULTET, new org.apache.thrift.meta_data.FieldMetaData("namefacultet", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAMESPECIALITY, new org.apache.thrift.meta_data.FieldMetaData("namespeciality", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GROUP, new org.apache.thrift.meta_data.FieldMetaData("group", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Facultet.class, metaDataMap);
  }

  public Facultet() {
  }

  public Facultet(
    String namefacultet,
    String namespeciality,
    String group)
  {
    this();
    this.namefacultet = namefacultet;
    this.namespeciality = namespeciality;
    this.group = group;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Facultet(Facultet other) {
    if (other.isSetNamefacultet()) {
      this.namefacultet = other.namefacultet;
    }
    if (other.isSetNamespeciality()) {
      this.namespeciality = other.namespeciality;
    }
    if (other.isSetGroup()) {
      this.group = other.group;
    }
  }

  public Facultet deepCopy() {
    return new Facultet(this);
  }

  @Override
  public void clear() {
    this.namefacultet = null;
    this.namespeciality = null;
    this.group = null;
  }

  public String getNamefacultet() {
    return this.namefacultet;
  }

  public Facultet setNamefacultet(String namefacultet) {
    this.namefacultet = namefacultet;
    return this;
  }

  public void unsetNamefacultet() {
    this.namefacultet = null;
  }

  /** Returns true if field namefacultet is set (has been assigned a value) and false otherwise */
  public boolean isSetNamefacultet() {
    return this.namefacultet != null;
  }

  public void setNamefacultetIsSet(boolean value) {
    if (!value) {
      this.namefacultet = null;
    }
  }

  public String getNamespeciality() {
    return this.namespeciality;
  }

  public Facultet setNamespeciality(String namespeciality) {
    this.namespeciality = namespeciality;
    return this;
  }

  public void unsetNamespeciality() {
    this.namespeciality = null;
  }

  /** Returns true if field namespeciality is set (has been assigned a value) and false otherwise */
  public boolean isSetNamespeciality() {
    return this.namespeciality != null;
  }

  public void setNamespecialityIsSet(boolean value) {
    if (!value) {
      this.namespeciality = null;
    }
  }

  public String getGroup() {
    return this.group;
  }

  public Facultet setGroup(String group) {
    this.group = group;
    return this;
  }

  public void unsetGroup() {
    this.group = null;
  }

  /** Returns true if field group is set (has been assigned a value) and false otherwise */
  public boolean isSetGroup() {
    return this.group != null;
  }

  public void setGroupIsSet(boolean value) {
    if (!value) {
      this.group = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NAMEFACULTET:
      if (value == null) {
        unsetNamefacultet();
      } else {
        setNamefacultet((String)value);
      }
      break;

    case NAMESPECIALITY:
      if (value == null) {
        unsetNamespeciality();
      } else {
        setNamespeciality((String)value);
      }
      break;

    case GROUP:
      if (value == null) {
        unsetGroup();
      } else {
        setGroup((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NAMEFACULTET:
      return getNamefacultet();

    case NAMESPECIALITY:
      return getNamespeciality();

    case GROUP:
      return getGroup();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NAMEFACULTET:
      return isSetNamefacultet();
    case NAMESPECIALITY:
      return isSetNamespeciality();
    case GROUP:
      return isSetGroup();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Facultet)
      return this.equals((Facultet)that);
    return false;
  }

  public boolean equals(Facultet that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_namefacultet = true && this.isSetNamefacultet();
    boolean that_present_namefacultet = true && that.isSetNamefacultet();
    if (this_present_namefacultet || that_present_namefacultet) {
      if (!(this_present_namefacultet && that_present_namefacultet))
        return false;
      if (!this.namefacultet.equals(that.namefacultet))
        return false;
    }

    boolean this_present_namespeciality = true && this.isSetNamespeciality();
    boolean that_present_namespeciality = true && that.isSetNamespeciality();
    if (this_present_namespeciality || that_present_namespeciality) {
      if (!(this_present_namespeciality && that_present_namespeciality))
        return false;
      if (!this.namespeciality.equals(that.namespeciality))
        return false;
    }

    boolean this_present_group = true && this.isSetGroup();
    boolean that_present_group = true && that.isSetGroup();
    if (this_present_group || that_present_group) {
      if (!(this_present_group && that_present_group))
        return false;
      if (!this.group.equals(that.group))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetNamefacultet()) ? 131071 : 524287);
    if (isSetNamefacultet())
      hashCode = hashCode * 8191 + namefacultet.hashCode();

    hashCode = hashCode * 8191 + ((isSetNamespeciality()) ? 131071 : 524287);
    if (isSetNamespeciality())
      hashCode = hashCode * 8191 + namespeciality.hashCode();

    hashCode = hashCode * 8191 + ((isSetGroup()) ? 131071 : 524287);
    if (isSetGroup())
      hashCode = hashCode * 8191 + group.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Facultet other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetNamefacultet()).compareTo(other.isSetNamefacultet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNamefacultet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.namefacultet, other.namefacultet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNamespeciality()).compareTo(other.isSetNamespeciality());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNamespeciality()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.namespeciality, other.namespeciality);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroup()).compareTo(other.isSetGroup());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroup()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.group, other.group);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Facultet(");
    boolean first = true;

    sb.append("namefacultet:");
    if (this.namefacultet == null) {
      sb.append("null");
    } else {
      sb.append(this.namefacultet);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("namespeciality:");
    if (this.namespeciality == null) {
      sb.append("null");
    } else {
      sb.append(this.namespeciality);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("group:");
    if (this.group == null) {
      sb.append("null");
    } else {
      sb.append(this.group);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FacultetStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public FacultetStandardScheme getScheme() {
      return new FacultetStandardScheme();
    }
  }

  private static class FacultetStandardScheme extends org.apache.thrift.scheme.StandardScheme<Facultet> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Facultet struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NAMEFACULTET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.namefacultet = iprot.readString();
              struct.setNamefacultetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAMESPECIALITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.namespeciality = iprot.readString();
              struct.setNamespecialityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // GROUP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.group = iprot.readString();
              struct.setGroupIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Facultet struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.namefacultet != null) {
        oprot.writeFieldBegin(NAMEFACULTET_FIELD_DESC);
        oprot.writeString(struct.namefacultet);
        oprot.writeFieldEnd();
      }
      if (struct.namespeciality != null) {
        oprot.writeFieldBegin(NAMESPECIALITY_FIELD_DESC);
        oprot.writeString(struct.namespeciality);
        oprot.writeFieldEnd();
      }
      if (struct.group != null) {
        oprot.writeFieldBegin(GROUP_FIELD_DESC);
        oprot.writeString(struct.group);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FacultetTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public FacultetTupleScheme getScheme() {
      return new FacultetTupleScheme();
    }
  }

  private static class FacultetTupleScheme extends org.apache.thrift.scheme.TupleScheme<Facultet> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Facultet struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetNamefacultet()) {
        optionals.set(0);
      }
      if (struct.isSetNamespeciality()) {
        optionals.set(1);
      }
      if (struct.isSetGroup()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetNamefacultet()) {
        oprot.writeString(struct.namefacultet);
      }
      if (struct.isSetNamespeciality()) {
        oprot.writeString(struct.namespeciality);
      }
      if (struct.isSetGroup()) {
        oprot.writeString(struct.group);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Facultet struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.namefacultet = iprot.readString();
        struct.setNamefacultetIsSet(true);
      }
      if (incoming.get(1)) {
        struct.namespeciality = iprot.readString();
        struct.setNamespecialityIsSet(true);
      }
      if (incoming.get(2)) {
        struct.group = iprot.readString();
        struct.setGroupIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

