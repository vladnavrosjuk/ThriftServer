/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-03-20")
public class Univer implements org.apache.thrift.TBase<Univer, Univer._Fields>, java.io.Serializable, Cloneable, Comparable<Univer> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Univer");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SPHERE_FIELD_DESC = new org.apache.thrift.protocol.TField("sphere", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField FACULTET_FIELD_DESC = new org.apache.thrift.protocol.TField("facultet", org.apache.thrift.protocol.TType.STRUCT, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new UniverStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new UniverTupleSchemeFactory();

  public String name; // required
  public String sphere; // required
  public Facultet facultet; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAME((short)1, "name"),
    SPHERE((short)2, "sphere"),
    FACULTET((short)3, "facultet");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // SPHERE
          return SPHERE;
        case 3: // FACULTET
          return FACULTET;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SPHERE, new org.apache.thrift.meta_data.FieldMetaData("sphere", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FACULTET, new org.apache.thrift.meta_data.FieldMetaData("facultet", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Facultet.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Univer.class, metaDataMap);
  }

  public Univer() {
  }

  public Univer(
    String name,
    String sphere,
    Facultet facultet)
  {
    this();
    this.name = name;
    this.sphere = sphere;
    this.facultet = facultet;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Univer(Univer other) {
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetSphere()) {
      this.sphere = other.sphere;
    }
    if (other.isSetFacultet()) {
      this.facultet = new Facultet(other.facultet);
    }
  }

  public Univer deepCopy() {
    return new Univer(this);
  }

  @Override
  public void clear() {
    this.name = null;
    this.sphere = null;
    this.facultet = null;
  }

  public String getName() {
    return this.name;
  }

  public Univer setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getSphere() {
    return this.sphere;
  }

  public Univer setSphere(String sphere) {
    this.sphere = sphere;
    return this;
  }

  public void unsetSphere() {
    this.sphere = null;
  }

  /** Returns true if field sphere is set (has been assigned a value) and false otherwise */
  public boolean isSetSphere() {
    return this.sphere != null;
  }

  public void setSphereIsSet(boolean value) {
    if (!value) {
      this.sphere = null;
    }
  }

  public Facultet getFacultet() {
    return this.facultet;
  }

  public Univer setFacultet(Facultet facultet) {
    this.facultet = facultet;
    return this;
  }

  public void unsetFacultet() {
    this.facultet = null;
  }

  /** Returns true if field facultet is set (has been assigned a value) and false otherwise */
  public boolean isSetFacultet() {
    return this.facultet != null;
  }

  public void setFacultetIsSet(boolean value) {
    if (!value) {
      this.facultet = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case SPHERE:
      if (value == null) {
        unsetSphere();
      } else {
        setSphere((String)value);
      }
      break;

    case FACULTET:
      if (value == null) {
        unsetFacultet();
      } else {
        setFacultet((Facultet)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case SPHERE:
      return getSphere();

    case FACULTET:
      return getFacultet();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case SPHERE:
      return isSetSphere();
    case FACULTET:
      return isSetFacultet();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Univer)
      return this.equals((Univer)that);
    return false;
  }

  public boolean equals(Univer that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_sphere = true && this.isSetSphere();
    boolean that_present_sphere = true && that.isSetSphere();
    if (this_present_sphere || that_present_sphere) {
      if (!(this_present_sphere && that_present_sphere))
        return false;
      if (!this.sphere.equals(that.sphere))
        return false;
    }

    boolean this_present_facultet = true && this.isSetFacultet();
    boolean that_present_facultet = true && that.isSetFacultet();
    if (this_present_facultet || that_present_facultet) {
      if (!(this_present_facultet && that_present_facultet))
        return false;
      if (!this.facultet.equals(that.facultet))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + ((isSetSphere()) ? 131071 : 524287);
    if (isSetSphere())
      hashCode = hashCode * 8191 + sphere.hashCode();

    hashCode = hashCode * 8191 + ((isSetFacultet()) ? 131071 : 524287);
    if (isSetFacultet())
      hashCode = hashCode * 8191 + facultet.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Univer other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSphere()).compareTo(other.isSetSphere());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSphere()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sphere, other.sphere);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFacultet()).compareTo(other.isSetFacultet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFacultet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.facultet, other.facultet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Univer(");
    boolean first = true;

    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sphere:");
    if (this.sphere == null) {
      sb.append("null");
    } else {
      sb.append(this.sphere);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("facultet:");
    if (this.facultet == null) {
      sb.append("null");
    } else {
      sb.append(this.facultet);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (facultet != null) {
      facultet.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UniverStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public UniverStandardScheme getScheme() {
      return new UniverStandardScheme();
    }
  }

  private static class UniverStandardScheme extends org.apache.thrift.scheme.StandardScheme<Univer> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Univer struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SPHERE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sphere = iprot.readString();
              struct.setSphereIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FACULTET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.facultet = new Facultet();
              struct.facultet.read(iprot);
              struct.setFacultetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Univer struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.sphere != null) {
        oprot.writeFieldBegin(SPHERE_FIELD_DESC);
        oprot.writeString(struct.sphere);
        oprot.writeFieldEnd();
      }
      if (struct.facultet != null) {
        oprot.writeFieldBegin(FACULTET_FIELD_DESC);
        struct.facultet.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UniverTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public UniverTupleScheme getScheme() {
      return new UniverTupleScheme();
    }
  }

  private static class UniverTupleScheme extends org.apache.thrift.scheme.TupleScheme<Univer> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Univer struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetName()) {
        optionals.set(0);
      }
      if (struct.isSetSphere()) {
        optionals.set(1);
      }
      if (struct.isSetFacultet()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetSphere()) {
        oprot.writeString(struct.sphere);
      }
      if (struct.isSetFacultet()) {
        struct.facultet.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Univer struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.sphere = iprot.readString();
        struct.setSphereIsSet(true);
      }
      if (incoming.get(2)) {
        struct.facultet = new Facultet();
        struct.facultet.read(iprot);
        struct.setFacultetIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

